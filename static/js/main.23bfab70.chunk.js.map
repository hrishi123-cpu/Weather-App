{"version":3,"sources":["app_component/weather.component.jsx","app_component/Form.component.jsx","App.js","serviceWorker.js","index.js"],"names":["weather","props","className","city","weatherIcon","temp_celsius","humidity","min","max","minmaxTemp","temp_min","temp_max","description","error","role","Form","onSubmit","loadweather","type","name","autoComplete","placeholder","App","getWeather","e","a","preventDefault","target","elements","value","country","fetch","api_call","json","response","console","log","setState","sys","celsius","calCel","main","temp","get_Weather","id","state","undefined","icon","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","Math","floor","icons","rangeID","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.23bfab70.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst weather = (props) => {\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"cards\">\r\n        <h1>{props.city}</h1>\r\n\r\n        <h5 className=\"py-4\">\r\n          <i className={`wi ${props.weatherIcon} display-1`} />\r\n        </h5>\r\n\r\n        {props.temp_celsius ? (\r\n          <h1 className=\"py-2\">{props.temp_celsius}&deg;</h1>\r\n        ) : null}\r\n        {props.humidity ? (\r\n          <h2 className=\"py-2\">Humidity: {props.humidity}%</h2>\r\n        ) : null}\r\n        {/* show max n min temp */}\r\n\r\n        {minmaxTemp(props.temp_min, props.temp_max)}\r\n        <h4 className=\"py-3\">{props.description}</h4>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nfunction minmaxTemp(min, max) {\r\n  if (min && max) {\r\n    return (\r\n      <h3>\r\n        <span className=\"px-4\">Min:{min}&deg;</span>\r\n        <span className=\"px-4\">Max:{max}&deg;</span>\r\n      </h3>\r\n    );\r\n  }\r\n}\r\n\r\nexport default weather;\r\n","import React from \"react\";\r\nimport \"./Form.style.css\";\r\nconst Form = (props) => {\r\n  return (\r\n    <div className=\"container\">\r\n      <div>{props.error ? error() : null}</div>\r\n      <form onSubmit={props.loadweather}>\r\n        <div className=\"row pt-4\">\r\n          <div className=\"col-md-3 offset-md-2\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              name=\"city\"\r\n              autoComplete=\"off\"\r\n              placeholder=\"City\"\r\n            />\r\n          </div>\r\n          <div className=\"col-md-3\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              name=\"country\"\r\n              autoComplete=\"off\"\r\n              placeholder=\"Country\"\r\n            />\r\n          </div>\r\n          <div className=\"col-md-3 mt-md-0 py-2 text-md-left\">\r\n            <button className=\"btn btn-warning\">Get Weather</button>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\nlet error = () => {\r\n  return (\r\n    <div className=\"alert alert-danger mx-5\" role=\"alert\">\r\n      Please Enter City and Country\r\n    </div>\r\n  );\r\n};\r\nexport default Form;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Weather from \"./app_component/weather.component\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"weather-icons/css/weather-icons.css\";\nimport Form from \"./app_component/Form.component\";\n\n//api call to api.openweathermap.org/data/2.5/weather?q=London,uk\n\nconst API_key = \"6f8666f21f8d9b9cf273e61637339c2d\";\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      city: undefined,\n      country: undefined,\n      icon: undefined,\n      main: undefined,\n      celsius: undefined,\n      temp_max: undefined,\n      temp_min: undefined,\n      description: \"\",\n      humidity: undefined,\n      error: false,\n    };\n\n    this.weatherIcon = {\n      Thunderstorm: \"wi-thunderstorm\",\n      Drizzle: \"wi-sleet\",\n      Rain: \"wi-storm-showers\",\n      Snow: \"wi-snow\",\n      Atmosphere: \"wi-fog\",\n      Clear: \"wi-day-sunny\",\n      Clouds: \"wi-day-fog\",\n    };\n  }\n  calCel(temp) {\n    let cell = Math.floor(temp - 273.15);\n    return cell;\n  }\n  get_Weather(icons, rangeID) {\n    switch (true) {\n      case rangeID >= 200 && rangeID <= 232:\n        this.setState({ icon: this.weatherIcon.Thunderstorm });\n        break;\n\n      case rangeID >= 300 && rangeID <= 321:\n        this.setState({ icon: this.weatherIcon.Drizzle });\n        break;\n\n      case rangeID >= 500 && rangeID <= 522:\n        this.setState({ icon: this.weatherIcon.Rain });\n        break;\n\n      case rangeID >= 600 && rangeID <= 622:\n        this.setState({ icon: this.weatherIcon.Snow });\n        break;\n\n      case rangeID >= 701 && rangeID <= 721:\n        this.setState({ icon: this.weatherIcon.Atmosphere });\n        break;\n\n      case rangeID === 800:\n        this.setState({ icon: this.weatherIcon.Clear });\n        break;\n\n      case rangeID >= 801 && rangeID <= 804:\n        this.setState({ icon: this.weatherIcon.Clouds });\n        break;\n      default:\n        this.setState({ icon: this.weatherIcon.Clouds });\n    }\n  }\n  getWeather = async (e) => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    if (city && country) {\n      const api_call = await fetch(\n        `http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_key}`\n      );\n\n      const response = await api_call.json();\n      console.log(response);\n      this.setState({\n        city: `${response.name},${response.sys.country}`,\n\n        celsius: this.calCel(response.main.temp),\n        temp_max: this.calCel(response.main.temp_max),\n        temp_min: this.calCel(response.main.temp_min),\n        humidity: response.main.humidity,\n        description: response.weather[0].description,\n        error: false,\n      });\n      this.get_Weather(this.weatherIcon, response.weather[0].id);\n    } else {\n      this.setState({ error: true });\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"App \">\n        <Form loadweather={this.getWeather} error={this.state.error} />\n        <Weather\n          city={this.state.city}\n          country={this.state.country}\n          temp_celsius={this.state.celsius}\n          temp_min={this.state.temp_min}\n          temp_max={this.state.temp_max}\n          description={this.state.description}\n          weatherIcon={this.state.icon}\n          humidity={this.state.humidity}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { HashRouter as Router } from \"react-router-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}